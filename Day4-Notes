Demo1: Variables in terraform

Create a variables file in the directory:

# sudo su -

# cd myfiles

# vim variables.tf

variable "access_key" {
 default = "AKIAUJU24ZR3S4I7TOUS"

}

variable "secret_key" {
 default = "YSZH5wGuVU0NDWcVkRBJ/gYUP3Bz7wKHpU8IfCCU"
}

variable "instance_type" {
default = "t2.micro"

}

Save the file


Open th e tf config file where variables have to be reffered.

# vim awsprovider.tf


provider "aws" {
  region     = "us-east-1"
  access_key = var.access_key
  secret_key = var.secret_key
}

data "aws_ami" "my_ami" {

most_recent = true

owners = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
  }
}



resource "aws_instance" "myec2" {
  ami           = data.aws_ami.my_ami.id
  instance_type = var.instance_type

  tags = {
    Name = "terraform"
  }
}


Demo2: Dynamic Block

# vim awssg.tf

variable "sg_ports" {
type = list(number)
default = [8989,8080,80,9091]
}

resource "aws_security_group" "allow_tls" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic"

dynamic "ingress" {
  for_each = var.sg_ports
  iterator = port
  content{
    description      = "TLS from VPC"
    from_port        = port.value
    to_port          = port.value
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]

  }
}

}

Save the file

# terraform apply

Demo3: Modules In Terraform

# cd

# mkdir modules dev prod

# cd modules

# mkdir myec2

# cd myec2

# vim myec2.tf

data "aws_ami" "my_ami" {

most_recent = true

owners = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
  }
}



resource "aws_instance" "myec2" {
  ami           = data.aws_ami.my_ami.id
  instance_type = var.instance_type

  tags = {
    Name = "terraform"
  }
}

Save the file

vim variables.tf

variable "instance_type" {

 default = "t2.micro"

}

save the file

# pwd

Path of the module  : /root/modules/myec2

# cd ../..

# cd dev

# vim main.tf

module "myec2module" {

source = "/root/modules/myec2"

}

save the file

# terraform init

# terraform apply

# vim provider.tf

provider "aws" {
  region     = "us-east-1"
  access_key = 
  secret_key =
}

Save the file

# terraform apply

cd ..

# cd prod

# vim provider.tf

provider "aws" {
  region     = "us-east-1"
  access_key = 
  secret_key =
}

save the file

# vim main.tf

module "myec2module" {

source = "/root/modules/myec2"
instance_type = "t2.large"
}

Save the file

# terraform init

# terraform plan

============================================

if we dont want the variable values to be replaced by a user then we make use of local block in tf file.

# cd modules

# mkdir mysg

# cd mysg

resource "aws_security_group" "sg_ec2" {
  name        = "allow_tls"
  description = "security group rule for ec2 "

  ingress {
    from_port        = local.port
    to_port          = local.port
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
}
resource "aws_security_group" "sg_lb" {
  name        = "allow_tls123"
  description = "security group rule for lb "

  ingress {
    from_port        = local.port
    to_port          = local.port
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
}
locals{

port = 8443

}

Save the file

vim variables.tf

variable "port" {}

# pwd  :  /root/modules/mysg

# cd ../..

# cd dev

# vim mian.tf


module "mysgmodule" {

source = "/root/modules/mysg"
port = 22
}


Save the file

# terraform init

# terraform apply


Demo4: Provisioners in Terraform and setup complete infrastructure in AWS using Terraform

# cd

# vim awsinfra.tf

provider "aws" {

  region     = "us-east-1"
  access_key = "
  secret_key = "
}
resource "aws_vpc" "sl-vpc" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "simplilearn"
  }
}
resource "aws_subnet" "subnet-1" {
  vpc_id     = aws_vpc.sl-vpc.id
  cidr_block = "10.0.1.0/24"
  map_public_ip_on_launch = true
  depends_on = [aws_vpc.sl-vpc]
  availability_zone = "us-east-1a"
  tags = {
    Name = "sl-subnet"
  }
}

resource "aws_route_table" "sl-route-table" {
 vpc_id     = aws_vpc.sl-vpc.id
 tags = {
  Name = "sl-route"
}
}

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.subnet-1.id
  route_table_id = aws_route_table.sl-route-table.id
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.sl-vpc.id
  depends_on = [aws_vpc.sl-vpc]

  tags = {
    Name = "mygw"
  }
}

resource "aws_route" "sl-route" {
  route_table_id = aws_route_table.sl-route-table.id
 destination_cidr_block    = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.gw.id
}


resource "aws_security_group" "allow_tls" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_vpc.sl-vpc.id

  ingress {
    description = "HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
ingress {
    description = "HTTPS"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

egress {
    description = "HTTPS"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

}


resource "tls_private_key" "web-key" {
  algorithm = "RSA"
}

resource "aws_key_pair" "app-instance-key" {
  key_name   = "web-key"
  public_key = tls_private_key.web-key.public_key_openssh
}

resource "local_file" "web-key" {
  content  = tls_private_key.web-key.private_key_pem
  filename = "web-key.pem"
}


resource "aws_instance" "myec2" {
  ami           = "ami-09988af04120b3591"
  instance_type = "t2.micro"
  tags = {
   Name = "awsinfra"
   }
  subnet_id = aws_subnet.subnet-1.id
  key_name = "web-key"
  security_groups = [aws_security_group.allow_tls.id]
  provisioner "remote-exec" {

  connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = tls_private_key.web-key.private_key_pem
    host     = self.public_ip
  }

  inline = [
    "sudo yum install httpd -y",
    "sudo yum install git php -y",
    "sudo systemctl start httpd",
    "sudo systemctl enable httpd"
]


}
}


























CEP discussion
