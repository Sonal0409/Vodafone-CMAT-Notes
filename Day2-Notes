Write a playbook using custom variables and loops:
===================================================
- hosts: webserver
  become: true
  become_user: root
  vars:
   user_list:
    - user01
    - user02
    - user03
  tasks:
  - name: update apt cache
    apt: update_cache=yes cache_valid_time=3600
  - name: Install packages on the host servers
    package: name={{item}} state=present
    loop:
     - apache2
     - mysql-server
     - php-mysql
     - php
     - libapache2-mod-php
     - python3-mysqldb
  - name: Create users on host servers
    user: name={{item}} state=present
    loop: "{{user_list}}"

===============================================================

Demo on tags:

========================================================
vim playbooktags.yml

- hosts: webserver
  become: true
  tasks:
  - name: update apt-cache
    apt: update_cache=yes cache_valid_time=3600
    tags: install
  - name: install package for LAMP architecture
    package: name={{item}} state=present
    loop:
     - mysql-server
     - php-mysql
    tags: install
  - name: Create a directory on worker nodes
    file: path=/tmp/mydir state=directory
    tags: mydir
  - name: Create a file in the directory
    file: path=/tmp/sonal state=touch
    tags: myfile

# ansible-playbook playbooktags.yml --tags=install
# ansible-playbook playbooktags.yml --tags=install,mydir
# ansible-playbook playbooktags.yml --skip-tags=install,mydir
# ansible-playbook playbooktags.yml --tags untagged
# ansible-playbook playbooktags.yml --tags tagged


NGINX Demo: Custom variables, fact Variables, Jinja 2, handlers
==========================================================

# vim index.html.j2

<h1> Deploy app on Apache </h1>
<h1> This deployment is done on server with name as {{ansible_hostname}} </h1>
<h1> The os familty of hosts is {{ansible_os_family}} </h1>
<h1> The time on the hostserver is {{ansible_date_time}} </h1>
<h1> The system admin is {{system_admin}} </h1>
<h1> Reach out to him on {{email}} </h1>

Save the file

# vim playbookapache.yml

- hosts: webserver
  become: true
  vars:
   pkg_name: apache2
   system_admin: admin
   email: sysadmin@sl.com
  tasks:
  - name: Install a packge on hostservers
    package: name={{pkg_name}} state=present
  - name: Start the apache server
    service: name={{pkg_name}} state=started
  - name: Copy the j2 template on apache server
    template:
     src: index.html.j2
     dest: /var/www/html
  - name: restart the apache server
    service: name={{pkg_name}} state=restarted






# vim playbooknginx.yml

- hosts: webserver
  become: true
  become_user: root
  tasks:
  - name: nginx
    command: apt-get update
  - name: uninstall apache
    package: name=apache2 state=absent
  - name: Install nginx
    package: name=nginx state=present
  - name: start nginx
    service: name=nginx state=started
  - name: template index.j2.html file to nginx server
    template:
     src: index.j2.html
     dest: /usr/share/nginx/html/index.html
     mode: 0644
    notify: Restart nginx service
  handlers:
  - name: Restart nginx service
    service: name=nginx state=restarted
     

# ansible-playbook playbooknginx.yml

Demo on Ansible Roles:
=====================================

Step 1: Clone the repository to get all the files for tomcat role as explained:

# git clone https://github.com/Sonal0409/AnsibleRolesDemo.git

# cd AnsibleRolesDemo

You will find the roles directory

Create a playbook to run the role:

# vim playbooktomcat.yml

- hosts: webserver
  become: true
  become_user: root
  roles:
   - tomcat
   
 Run the below command to exeucte the playbook and roles
 
 # ansible-playbook -i /home/ansiuser/myinventory playbooktomcat.yml --extra-vars action=install
